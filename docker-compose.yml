version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-builder
    container_name: acaia-backend
    ports:
      - "8001:8001"
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - NODE_ENV=production
    volumes:
      - ./uploads:/app/uploads
      - ./data:/app/data
      - ./logs:/app/logs
      - ./cache:/app/cache
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - acaia-network

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-builder
    container_name: acaia-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8001
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - acaia-network

  # Redis Cache (opciono)
  redis:
    image: redis:7-alpine
    container_name: acaia-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - acaia-network

  # PostgreSQL Database (opciono)
  postgres:
    image: postgres:15-alpine
    container_name: acaia-postgres
    environment:
      POSTGRES_DB: acaia
      POSTGRES_USER: acaia_user
      POSTGRES_PASSWORD: acaia_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/setup_scripts:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - acaia-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: acaia-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - acaia-network

volumes:
  redis_data:
  postgres_data:

networks:
  acaia-network:
    driver: bridge 