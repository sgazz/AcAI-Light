#!/usr/bin/env python3
"""
Test skripta za Context Selection funkcionalnost
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.context_selector import ContextSelector
from app.rag_service import RAGService
import json

def test_context_selector():
    """Testira Context Selector funkcionalnost"""
    print("=== Testiranje Context Selector funkcionalnosti ===\n")
    
    # Inicijalizuj RAG servis
    print("1. Inicijalizacija RAG servisa...")
    rag_service = RAGService()
    
    # Test upiti
    test_queries = [
        "≈†ta je ve≈°taƒçka inteligencija?",
        "Uporedi ma≈°insko uƒçenje i deep learning",
        "Kako funkcioni≈°e RAG sistem i za≈°to je koristan?",
        "Objasni razliku izmeƒëu bi-encoder i cross-encoder modela",
        "Koji su koraci u procesu obrade dokumenata?"
    ]
    
    # Test konteksti
    test_contexts = {
        'documents': [
            {
                'filename': 'AI_introduction.pdf',
                'content': 'Ve≈°taƒçka inteligencija je grana raƒçunarske nauke koja se bavi kreiranjem sistema koji mogu da izvr≈°avaju zadatke koji obiƒçno zahtevaju ljudsku inteligenciju. Ovi sistemi mogu da uƒçe, zakljuƒçuju, prepoznaju obrasce i donose odluke na osnovu podataka.',
                'score': 0.9,
                'page': 1
            },
            {
                'filename': 'ML_basics.pdf',
                'content': 'Ma≈°insko uƒçenje je podskup ve≈°taƒçke inteligencije koji omoguƒáava raƒçunarima da uƒçe i pobolj≈°avaju se iz iskustva bez eksplicitnog programiranja. Koristi algoritme koji mogu da identifikuju obrasce u podacima i koriste te obrasce za dono≈°enje odluka.',
                'score': 0.8,
                'page': 1
            },
            {
                'filename': 'RAG_system.pdf',
                'content': 'RAG (Retrieval-Augmented Generation) sistem kombinuje pretragu dokumenata sa generisanjem odgovora. Prvo pretra≈æuje relevantne dokumente, a zatim koristi te informacije za generisanje taƒçnih i informativnih odgovora.',
                'score': 0.85,
                'page': 1
            }
        ],
        'conversation_history': [
            {
                'sender': 'user',
                'content': 'Mo≈æe≈° li mi objasniti ≈°ta je ve≈°taƒçka inteligencija?',
                'timestamp': '2024-01-27T10:00:00'
            },
            {
                'sender': 'ai',
                'content': 'Ve≈°taƒçka inteligencija je tehnologija koja omoguƒáava raƒçunarima da simuliraju ljudsku inteligenciju. Mo≈æe da uƒçi, zakljuƒçuje i donosi odluke na osnovu podataka.',
                'timestamp': '2024-01-27T10:01:00'
            },
            {
                'sender': 'user',
                'content': 'Kako se razlikuje od ma≈°inskog uƒçenja?',
                'timestamp': '2024-01-27T10:02:00'
            },
            {
                'sender': 'ai',
                'content': 'Ma≈°insko uƒçenje je podskup ve≈°taƒçke inteligencije koji se fokusira na algoritme koji mogu da uƒçe iz podataka bez eksplicitnog programiranja.',
                'timestamp': '2024-01-27T10:03:00'
            }
        ],
        'user_profile': {
            'interests': 'AI, ma≈°insko uƒçenje, ve≈°taƒçka inteligencija, deep learning',
            'preferences': 'detaljni odgovori, praktiƒçni primeri, vizuelizacije',
            'history': 'aktivni korisnik RAG sistema, ƒçesto pita o AI temama'
        },
        'general_context': {
            'system_info': 'AcAIA - AI Study Assistant',
            'current_topic': 've≈°taƒçka inteligencija i ma≈°insko uƒçenje',
            'session_duration': '45 minuta',
            'user_level': 'srednji'
        }
    }
    
    print("2. Testiranje analize upita...")
    for i, query in enumerate(test_queries, 1):
        analysis = rag_service.context_selector._analyze_query(query)
        print(f"   Upit {i}: {query}")
        print(f"   Tip: {analysis['query_type']}")
        print(f"   Slo≈æenost: {analysis['complexity']:.2f}")
        print(f"   Kljuƒçne reƒçi: {analysis['keywords'][:5]}")
        print(f"   Entiteti: {analysis['entities']}")
        print()
    
    print("3. Testiranje context selection-a...")
    for i, query in enumerate(test_queries[:3], 1):  # Testiraj prva 3 upita
        print(f"   Test {i}: {query}")
        
        context_selection = rag_service.context_selector.select_context(
            query, test_contexts, max_results=3
        )
        
        if context_selection['status'] == 'success':
            print(f"   ‚úÖ Context selection uspe≈°an")
            print(f"   Odabrani kontekst: {context_selection['context_analysis']['total_context_length']} karaktera")
            print(f"   Tipovi konteksta: {context_selection['context_analysis']['context_types_used']}")
            print(f"   Skor relevantnosti: {context_selection['context_analysis']['relevance_score']:.3f}")
            print(f"   Kandidati: {context_selection['context_candidates']} -> {context_selection['selected_candidates']}")
            
            # Prika≈æi odabrani kontekst
            selected_context = context_selection['selected_context']
            if selected_context:
                print(f"   Kontekst: {selected_context[:200]}...")
        else:
            print(f"   ‚ùå Gre≈°ka: {context_selection['message']}")
        
        print()
    
    return True

def test_enhanced_context_rag():
    """Testira enhanced context RAG odgovor"""
    print("\n=== Testiranje Enhanced Context RAG odgovora ===\n")
    
    # Inicijalizuj RAG servis
    print("1. Inicijalizacija RAG servisa...")
    rag_service = RAGService()
    
    # Test upit
    complex_query = "Objasni kako funkcioni≈°e RAG sistem i za≈°to je koristan za uƒçenje"
    
    # Pripremi kontekste
    available_contexts = {
        'documents': rag_service.list_documents(),
        'conversation_history': [
            {
                'sender': 'user',
                'content': '≈†ta je RAG sistem?',
                'timestamp': '2024-01-27T10:00:00'
            },
            {
                'sender': 'ai',
                'content': 'RAG sistem kombinuje pretragu dokumenata sa generisanjem odgovora.',
                'timestamp': '2024-01-27T10:01:00'
            }
        ],
        'user_profile': {
            'interests': 'AI, ma≈°insko uƒçenje, ve≈°taƒçka inteligencija',
            'preferences': 'detaljni odgovori, praktiƒçni primeri',
            'history': 'aktivni korisnik RAG sistema'
        },
        'general_context': {
            'system_info': 'AcAIA - AI Study Assistant',
            'current_topic': 've≈°taƒçka inteligencija i ma≈°insko uƒçenje'
        }
    }
    
    print("2. Generisanje enhanced context RAG odgovora...")
    
    # Simuliraj async poziv
    import asyncio
    
    async def test_enhanced_rag():
        rag_response = await rag_service.generate_enhanced_context_response(
            complex_query, 
            available_contexts, 
            max_results=3
        )
        
        if rag_response["status"] == "success":
            print("   ‚úÖ Enhanced context RAG odgovor uspe≈°no generisan")
            print(f"   Odgovor: {rag_response['response'][:200]}...")
            print(f"   Context selector kori≈°ƒáen: {rag_response.get('context_selector_used', False)}")
            print(f"   Du≈æina odabranog konteksta: {rag_response.get('selected_context_length', 0)}")
            print(f"   Broj rezultata pretrage: {rag_response.get('retrieval_results_count', 0)}")
            print(f"   Koraci pretrage: {rag_response.get('retrieval_steps', 0)}")
            print(f"   Tip upita: {rag_response.get('query_type', 'unknown')}")
            
            # Context analiza
            context_analysis = rag_response.get('context_analysis', {})
            if context_analysis:
                print(f"   Slo≈æenost upita: {context_analysis.get('query_complexity', 0):.2f}")
                print(f"   Tipovi konteksta: {context_analysis.get('context_types_used', [])}")
                print(f"   Ukupna du≈æina konteksta: {context_analysis.get('total_context_length', 0)}")
                print(f"   Skor relevantnosti: {context_analysis.get('relevance_score', 0):.3f}")
        else:
            print("   ‚ùå Gre≈°ka pri generisanju enhanced context RAG odgovora")
            print(f"   Poruka: {rag_response.get('message', 'Nepoznata gre≈°ka')}")
    
    # Pokreni test
    asyncio.run(test_enhanced_rag())

def test_context_selector_info():
    """Testira informacije o context selector-u"""
    print("\n=== Testiranje Context Selector informacija ===\n")
    
    # Inicijalizuj RAG servis
    print("1. Inicijalizacija RAG servisa...")
    rag_service = RAGService()
    
    # Dohvati informacije
    info = rag_service.get_context_selector_info()
    
    print("2. Context Selector informacije:")
    print(f"   Maksimalna du≈æina konteksta: {info['max_context_length']}")
    print(f"   Minimalni skor relevantnosti: {info['min_relevance_score']}")
    print(f"   Prag preklapanja: {info['context_overlap_threshold']}")
    print(f"   Opis: {info['description']}")
    
    print("\n3. Tipovi konteksta:")
    for context_type, priority in info['context_types'].items():
        print(f"   {context_type}: {priority}")

def main():
    """Glavna funkcija za testiranje"""
    print("üöÄ Poƒçetak testiranja Context Selection funkcionalnosti\n")
    
    # Test context selector
    selector_success = test_context_selector()
    
    if selector_success:
        # Test enhanced context RAG
        test_enhanced_context_rag()
        
        # Test informacije
        test_context_selector_info()
        
        print("\n‚úÖ Svi testovi zavr≈°eni uspe≈°no!")
        print("\nüìù Napomene:")
        print("- Context Selection pobolj≈°ava kvalitet odgovora")
        print("- Pametni izbor konteksta iz razliƒçitih izvora")
        print("- Rangiranje i optimizacija konteksta")
        print("- Integracija sa multi-step retrieval")
        print("- Podr≈°ka za razliƒçite tipove upita")
    else:
        print("\n‚ùå Testiranje context selector-a nije uspelo!")

if __name__ == "__main__":
    main() 