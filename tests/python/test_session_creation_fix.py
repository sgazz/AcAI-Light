#!/usr/bin/env python3
"""
Test za proveru popravke kreiranja sesija
Testira: WelcomeScreen -> SessionSetupModal -> ChatBox flow sa stvarnim kreiranjem sesija
"""

import asyncio
import aiohttp
import json
import uuid
from datetime import datetime
import sys
import os
from typing import Dict, List, Optional

# Dodaj backend direktorijum u path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'backend'))

try:
    from supabase_client import get_supabase_manager, get_async_supabase_manager
    SUPABASE_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Supabase nije dostupan: {e}")
    SUPABASE_AVAILABLE = False

class SessionCreationFixTester:
    def __init__(self):
        self.base_url = "http://localhost:8001"
        self.test_results = []
        self.supabase_manager = None
        self.created_sessions = []
        
        if SUPABASE_AVAILABLE:
            try:
                self.supabase_manager = get_supabase_manager()
                print("‚úÖ Supabase manager uspe≈°no inicijalizovan")
            except Exception as e:
                print(f"‚ùå Gre≈°ka pri inicijalizaciji Supabase: {e}")
    
    async def test_welcome_screen_flow(self):
        """Test 1: Simuliraj WelcomeScreen -> SessionSetupModal -> ChatBox flow"""
        print("\nüé≠ TEST 1: WelcomeScreen -> SessionSetupModal -> ChatBox Flow")
        print("="*60)
        
        # Korak 1: Korisnik klikne "Zapoƒçni sada" na WelcomeScreen-u
        print("üë§ WelcomeScreen: Korisnik klikne 'Zapoƒçni sada'")
        
        # Korak 2: Otvara se SessionSetupModal
        print("üë§ SessionSetupModal: Modal se otvara")
        
        # Korak 3: Korisnik bira predmetnu sesiju
        print("üë§ SessionSetupModal: Korisnik bira Matematika -> Algebra")
        
        # Korak 4: Simuliraj kreiranje sesije kako radi WelcomeScreen.handleStartSession
        session_id = await self.simulate_welcome_screen_session_creation("matematika", "Algebra", "subject")
        
        if session_id:
            print(f"‚úÖ Sesija kreirana: {session_id}")
            
            # Korak 5: Simuliraj da se ChatBox uƒçita sa tom sesijom
            print("üë§ ChatBox: Komponenta se uƒçita sa kreiranom sesijom")
            
            # Korak 6: Korisnik ≈°alje poruku
            print("üë§ ChatBox: Korisnik ≈°alje poruku")
            await self.send_message(session_id, "Zdravo! Treba mi pomoƒá sa algebrom")
            
            # Proveri da li je poruka u odgovarajuƒáoj sesiji
            await self.verify_session_messages(session_id, 1)
            
            self.test_results.append(("WelcomeScreen Flow", True, f"Sesija kreirana i poruka poslata: {session_id}"))
            return session_id
        else:
            self.test_results.append(("WelcomeScreen Flow", False, "Nije moguƒáe kreirati sesiju"))
            return None
    
    async def test_multiple_sessions_flow(self):
        """Test 2: Testiraj kreiranje vi≈°e sesija"""
        print("\nüé≠ TEST 2: Kreiranje Vi≈°e Sesija")
        print("="*60)
        
        # Korak 1: Kreiraj prvu sesiju (predmetnu)
        print("üë§ Kreiranje prve sesije (Matematika)")
        session1_id = await self.simulate_welcome_screen_session_creation("matematika", "Geometrija", "subject")
        
        if session1_id:
            await self.send_message(session1_id, "Prva poruka u matematiƒçkoj sesiji")
            
            # Korak 2: Kreiraj drugu sesiju (generalnu)
            print("üë§ Kreiranje druge sesije (General)")
            session2_id = await self.simulate_welcome_screen_session_creation("general", "General Chat", "general")
            
            if session2_id:
                await self.send_message(session2_id, "Prva poruka u generalnoj sesiji")
                
                # Korak 3: Vrati se na prvu sesiju
                print("üë§ Povratak na prvu sesiju")
                await self.send_message(session1_id, "Druga poruka u matematiƒçkoj sesiji")
                
                # Proveri da li su sesije razliƒçite
                if session1_id != session2_id:
                    print("‚úÖ Sesije su razliƒçite - problem re≈°en!")
                    self.test_results.append(("Multiple Sessions", True, f"2 razliƒçite sesije: {session1_id}, {session2_id}"))
                    return [session1_id, session2_id]
                else:
                    print("‚ùå Sesije su iste - problem nije re≈°en")
                    self.test_results.append(("Multiple Sessions", False, "Sesije su iste"))
                    return None
            else:
                self.test_results.append(("Multiple Sessions", False, "Nije moguƒáe kreirati drugu sesiju"))
                return None
        else:
            self.test_results.append(("Multiple Sessions", False, "Nije moguƒáe kreirati prvu sesiju"))
            return None
    
    async def test_session_metadata_creation(self):
        """Test 3: Proveri da li se metadata kreira ispravno"""
        print("\nüé≠ TEST 3: Session Metadata Kreiranje")
        print("="*60)
        
        # Kreiraj sesiju sa specifiƒçnim metadata
        session_id = await self.simulate_welcome_screen_session_creation("fizika", "Mehanika", "subject")
        
        if session_id:
            # Proveri da li se metadata kreira u Supabase
            if self.supabase_manager:
                try:
                    result = self.supabase_manager.client.table('session_metadata').select('*').eq('session_id', session_id).execute()
                    
                    if result.data:
                        metadata = result.data[0]
                        print(f"‚úÖ Session metadata pronaƒëena:")
                        print(f"   - Name: {metadata.get('name', 'N/A')}")
                        print(f"   - Description: {metadata.get('description', 'N/A')}")
                        
                        # Proveri da li ima oƒçekivane informacije
                        if "Fizika - Mehanika" in metadata.get('name', ''):
                            print("‚úÖ Metadata sadr≈æi oƒçekivane informacije")
                            self.test_results.append(("Session Metadata", True, f"Metadata kreiran: {metadata.get('name')}"))
                            return session_id
                        else:
                            print("‚ùå Metadata ne sadr≈æi oƒçekivane informacije")
                            self.test_results.append(("Session Metadata", False, "Metadata ne sadr≈æi oƒçekivane informacije"))
                            return None
                    else:
                        print("‚ùå Session metadata nije pronaƒëena")
                        self.test_results.append(("Session Metadata", False, "Metadata nije pronaƒëen"))
                        return None
                except Exception as e:
                    print(f"‚ùå Gre≈°ka pri proveri metadata: {e}")
                    self.test_results.append(("Session Metadata", False, str(e)))
                    return None
            else:
                print("‚ö†Ô∏è Supabase nije dostupan - preskaƒçem test")
                self.test_results.append(("Session Metadata", False, "Supabase nije dostupan"))
                return None
        else:
            self.test_results.append(("Session Metadata", False, "Nije moguƒáe kreirati sesiju"))
            return None
    
    async def simulate_welcome_screen_session_creation(self, subject: str, topic: str, sessionType: str) -> Optional[str]:
        """Simuliraj kako WelcomeScreen kreira sesiju"""
        try:
            # Korak 1: Kreiraj sesiju (kao ≈°to radi WelcomeScreen.handleStartSession)
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.base_url}/chat/new-session") as response:
                    if response.status == 200:
                        data = await response.json()
                        session_id = data.get('session_id')
                        
                        if session_id:
                            self.created_sessions.append(session_id)
                            
                            # Korak 2: Kreiraj session metadata
                            session_title = 'General Chat' if sessionType == 'general' else f"{subject.capitalize()} - {topic}"
                            
                            metadata_data = {
                                "session_id": session_id,
                                "name": session_title,
                                "description": f"{sessionType.capitalize()} sesija za {'op≈°ta pitanja' if sessionType == 'general' else f'{subject.capitalize()} - {topic}'}"
                            }
                            
                            async with session.post(
                                f"{self.base_url}/session/metadata",
                                params=metadata_data
                            ) as metadata_response:
                                if metadata_response.status == 200:
                                    print(f"‚úÖ Session metadata kreiran za: {session_title}")
                                else:
                                    print(f"‚ö†Ô∏è Gre≈°ka pri kreiranju metadata: {metadata_response.status}")
                            
                            return session_id
        except Exception as e:
            print(f"‚ùå Gre≈°ka pri simulaciji WelcomeScreen-a: {e}")
        return None
    
    async def send_message(self, session_id: str, content: str):
        """Po≈°alji poruku u sesiju"""
        try:
            message_data = {
                "message": content,
                "session_id": session_id
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/chat",
                    json=message_data
                ) as response:
                    if response.status == 200:
                        print(f"‚úÖ Poruka poslata: {content[:30]}...")
                        return True
                    else:
                        print(f"‚ùå Gre≈°ka pri slanju poruke: {response.status}")
                        return False
        except Exception as e:
            print(f"‚ùå Gre≈°ka pri slanju poruke: {e}")
            return False
    
    async def verify_session_messages(self, session_id: str, expected_count: int):
        """Proveri da li su poruke u odgovarajuƒáoj sesiji"""
        if not self.supabase_manager:
            print("‚ö†Ô∏è Supabase nije dostupan - preskaƒçem verifikaciju")
            return
        
        try:
            result = self.supabase_manager.client.table('chat_history').select('*').eq('session_id', session_id).execute()
            actual_count = len(result.data) if result.data else 0
            
            if actual_count >= expected_count:
                print(f"‚úÖ Sesija {session_id} ima {actual_count} poruka (oƒçekivano: {expected_count})")
            else:
                print(f"‚ùå Sesija {session_id} ima {actual_count} poruka (oƒçekivano: {expected_count})")
                
        except Exception as e:
            print(f"‚ùå Gre≈°ka pri verifikaciji poruka: {e}")
    
    async def cleanup_test_sessions(self):
        """Oƒçisti test sesije"""
        print("\nüßπ ƒåi≈°ƒáenje Test Sesija")
        
        if not self.supabase_manager or not self.created_sessions:
            print("‚ÑπÔ∏è Nema sesija za ƒçi≈°ƒáenje")
            return
        
        try:
            for session_id in self.created_sessions:
                print(f"üóëÔ∏è Brisanje sesije: {session_id}")
                
                # Obri≈°i iz chat_history
                try:
                    self.supabase_manager.client.table('chat_history').delete().eq('session_id', session_id).execute()
                    print(f"‚úÖ Chat history obrisana za {session_id}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Gre≈°ka pri brisanju chat history: {e}")
                
                # Obri≈°i iz session_metadata
                try:
                    self.supabase_manager.client.table('session_metadata').delete().eq('session_id', session_id).execute()
                    print(f"‚úÖ Session metadata obrisana za {session_id}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Gre≈°ka pri brisanju metadata: {e}")
            
            print(f"‚úÖ Oƒçi≈°ƒáeno {len(self.created_sessions)} test sesija")
            
        except Exception as e:
            print(f"‚ùå Gre≈°ka pri ƒçi≈°ƒáenju: {e}")
    
    def print_summary(self):
        """Prika≈æi rezultate testova"""
        print("\n" + "="*60)
        print("üìä REZULTATI TESTOVA POPRAVKE")
        print("="*60)
        
        passed = 0
        failed = 0
        
        for test_name, success, details in self.test_results:
            status = "‚úÖ PASS" if success else "‚ùå FAIL"
            print(f"{status} {test_name}: {details}")
            if success:
                passed += 1
            else:
                failed += 1
        
        print("\n" + "="*60)
        print(f"üìà UKUPNO: {passed + failed} testova")
        print(f"‚úÖ USPE≈†NO: {passed}")
        print(f"‚ùå NEUSPE≈†NO: {failed}")
        print(f"üìä USPE≈†NOST: {(passed / (passed + failed) * 100):.1f}%" if (passed + failed) > 0 else "N/A")
        print("="*60)
        
        if failed == 0:
            print("\nüéâ PROBLEM RE≈†EN! SVE SESIJE SE KREIRAJU ISPRAVNO!")
        else:
            print(f"\n‚ö†Ô∏è {failed} test(ova) nije pro≈°lo - problem nije potpuno re≈°en")
    
    async def run_all_tests(self):
        """Pokreni sve testove"""
        print("üöÄ POKRETANJE TESTOVA POPRAVKE KREIRANJA SESIJA")
        print("="*60)
        
        try:
            # Test 1: WelcomeScreen flow
            await self.test_welcome_screen_flow()
            
            # Test 2: Multiple sessions
            await self.test_multiple_sessions_flow()
            
            # Test 3: Session metadata
            await self.test_session_metadata_creation()
            
            # Prika≈æi rezultate
            self.print_summary()
            
        except Exception as e:
            print(f"‚ùå Gre≈°ka pri pokretanju testova: {e}")
        finally:
            # Oƒçisti test sesije
            await self.cleanup_test_sessions()

async def main():
    """Glavna funkcija"""
    tester = SessionCreationFixTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())
